<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sandbox</title>
    <meta name="description" content="Class 10 Show+Tell: GeoJson">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <link rel="stylesheet" href="css.css" />
    <link rel="stylesheet" href="../../public/css/main-styles.css" />
    
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
</head>
<body>
  <div id="mainDiv">
    <div id="searchBar">
      <div id="innerSearchBar">
        <input type="text" id="locationInput" placeholder="Enter location...">
        <button onclick="searchLocation()">Search</button>
      </div>
    </div>


    <div id="travelSlider">
        <input type="range" id="travelTimeSlider" min="0" max="240" value="30" step="30">
        <span id="travelTimeValue">30</span> minutes
    </div>

    
    <div id="mapid"></div>
    <div id="error" class="tippy-tooltip honeybee-theme">
        <p><b>No API and APPLICATION_ID key inserted </b></p>
        <p><a target="_blank" href="http://docs.traveltimeplatform.com/overview/getting-keys/">Sign up for an API key</a></p>
        <p>Place it in API and APPLICATION_ID variables</p>
    </div>
  </div>
    <script>
        // Create the map with initial view
        var mymap = L.map('mapid');

        // Function to update map view with user's current location
        function updateMapView(latitude, longitude) {
            mymap.setView([latitude, longitude], 15); // Set the view with updated latitude and longitude
        }

        // Function to handle successful retrieval of user's location
        function getLocationSuccess(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;
            updateMapView(latitude, longitude); // Update map view with user's current location
        }

        navigator.geolocation.getCurrentPosition(getLocationSuccess);

        

        var APPLICATION_ID = "8f13b8a0";
        var API_KEY = "6508b20eef4a1fc873163942b8902499";

        L.tileLayer('https://tiles.traveltime.com/lux/{z}/{x}/{y}.png?key=' + APPLICATION_ID, {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> | Created with <a href="http://traveltimeplatform.com" target="_blank">TravelTime API</a>',
            maxZoom: 18,
            tileSize: 512,
            zoomOffset: -1            
        }).addTo(mymap);

        function searchLocation() {
            var location = document.getElementById("locationInput").value;
            if (location.trim() !== "") {
                sendGeocodingRequest(location);
            }
        }

        //Updates time value in real time
        document.getElementById("travelTimeSlider").addEventListener("input", function() {
            const newValue = this.value;
            document.getElementById("travelTimeValue").textContent = newValue;
        });

        function getTime() {
            var timeToTravel = document.getElementById("travelTimeSlider").value;
            if (timeToTravel.trim() !== "") {
                timeToTravel = parseInt(timeToTravel, 10)
                return timeToTravel;
            }
            return null;
        }

        //Adding travelTime parameter to pass through with default value of 30min
        function sendTimeMapRequest(geocodingResponse, travelTime=30) {
            var coords = geocodingResponse.features[0].geometry.coordinates;
            var latLng = { lat: coords[1], lng: coords[0] };
         
            var request = {
                departure_searches: [{
                    id: "first_location",
                    coords: latLng,
                    transportation: {
                        type: "public_transport" },
                    departure_time: new Date().toJSON(),
                    travel_time: travelTime * 60
                }],
                arrival_searches: []
            };

            var xhr = new XMLHttpRequest()
            xhr.addEventListener("readystatechange", function () {
                if (this.readyState === 4) {
                    drawTimeMap(mymap, this.response);
                }
            });
            xhr.open("POST", "https://api.traveltimeapp.com/v4/time-map")
            xhr.setRequestHeader("X-Application-Id", APPLICATION_ID);
            xhr.setRequestHeader("X-Api-Key", API_KEY);
            xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
            xhr.responseType = "json";
            xhr.send(JSON.stringify(request));
        }

        function sendGeocodingRequest(location) {
            var xhr = new XMLHttpRequest();
            xhr.responseType = "json";
            xhr.open("GET", "https://api.traveltimeapp.com/v4/geocoding/search?query="+ location)
            xhr.setRequestHeader( "X-Application-Id", APPLICATION_ID);
            xhr.setRequestHeader( "X-Api-Key", API_KEY);
            xhr.setRequestHeader( "Accept-Language", " en-US");
            xhr.onreadystatechange = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    if(xhr.readyState === 4){
                        const travelValue = getTime();
                        sendTimeMapRequest(xhr.response, travelValue);
                    }
                } else {
                    if(APPLICATION_ID === "place your app id here" || API_KEY ===  "place your api key here") {
                        document.getElementById("error").style.display = "block";
                    }
                }
            };
            xhr.send();
        };


        function ringCoordsHashToArray(ring) {
            return ring.map(function (latLng) {return [latLng.lat, latLng.lng];});
        };

        function drawTimeMap(map, response) {
            var shapesCoords = response.results[0].shapes.map(function (polygon) {
                var shell = ringCoordsHashToArray(polygon.shell);
                var holes = polygon.holes.map(ringCoordsHashToArray);
                return [shell].concat(holes);
            });
            var polygon = L.polygon(shapesCoords, { color: 'blue' });
            polygon.addTo(map);
            map.fitBounds(polygon.getBounds());
        };
    </script>
</body>
</html>
